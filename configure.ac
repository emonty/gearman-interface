AC_INIT([gearman-interface],[0.0.1])
AC_CONFIG_AUX_DIR([config])
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_MACRO_DIR([m4])

# Setting CFLAGS here prevents AC_CANONICAL_TARGET from injecting them
SAVE_CFLAGS=${CFLAGS}
SAVE_CXXFLAGS=${CXXFLAGS}
CFLAGS=
CXXFLAGS=

AC_CANONICAL_TARGET

CFLAGS=${SAVE_CFLAGS}
CXXFLAGS=${SAVE_CXXFLAGS}

AM_INIT_AUTOMAKE([1.10 tar-ustar gnu subdir-objects nostdinc])


AC_PROG_CXX 

LT_INIT
LT_LANG(C)
LT_LANG(C++)

AC_DEFINE([SWIG_TYPE_TABLE],[libgearman],[Type Table name for SWIG symbol table])
AC_ARG_WITH([debug],
    [AS_HELP_STRING([--with-debug],
       [Build a debugging version @<:@default=no@:>@])],
    [with_debug=$withval],
    [with_debug=no])

AC_PATH_PROG([FIND],find)
AS_IF([test "x$FIND" = "x"],
      [AC_MSG_ERROR([Can't locate find])])
AS_IF([test "x$GREP" = "x"],
      [AC_MSG_ERROR([Can't locate grep])])
AS_IF([test "x$SED" = "x"],
      [AC_MSG_ERROR([Can't locate sed])])

AC_PROG_SWIG(1.3.31)
AC_SUBST(SWIG)

AC_LIB_HAVE_LINKFLAGS(gearman,,
  [#include <libgearman/gearman.h>],
  [
    gearman_return_t x= GEARMAN_SUCCESS;
    const char *version= gearman_version()
  ])
if test "x$ac_cv_libgearman" = "xno"
then
  AC_MSG_ERROR(could not find libgearman)
fi

WITH_PYTHON
WITH_RUBY

dnl Have to hard-code /usr/local into the path. I hate this.
SWIG="$SWIG \${DEFS} -I/usr/local/include -I/usr/include -I\${top_srcdir} -I\${top_builddir} \${DRIZZLE_CFLAGS}"
GENERATED="# This file is autogenerated!" 
AC_SUBST(GENERATED)

AC_ARG_ENABLE([warnings],
    [AS_HELP_STRING([--enable-warnings],
       [Toggle warnings @<:@default=off@:>@])],
    [ac_warnings="$enableval"],
    [ac_warnings="no"])

AC_ARG_ENABLE([pedantic-warnings],
    [AS_HELP_STRING([--enable-pedantic-warnings],
       [Toggle pedanticness @<:@default=off@:>@])],
    [ac_warn_pedantic="$enableval"],
    [ac_warn_pedantic="no"])

AC_ARG_ENABLE([fail],
    [AS_HELP_STRING([--enable-fail],
       [Turn warnings into failures @<:@default=off@:>@])],
    [ac_warn_fail="$enableval"],
    [ac_warn_fail="no"])

AC_ARG_ENABLE([unreachable],
    [AS_HELP_STRING([--enable-unreachable],
       [Enable warnings about unreachable code @<:@default=off@:>@])],
    [ac_warn_unreachable="$enableval"],
    [ac_warn_unreachable="no"])

AC_ARG_ENABLE([longlong-warnings],
    [AS_HELP_STRING([--enable-longlong-warnings],
       [Enable warnings about longlong in C++ @<:@default=off@:>@])],
    [ac_warn_longlong="$enableval"],
    [ac_warn_longlong="no"])

AC_ARG_ENABLE([strict-aliasing],
    [AS_HELP_STRING([--enable-strict-aliasing],
       [Enable warnings about stict-aliasing @<:@default=off@:>@])],
    [ac_warn_strict_aliasing="$enableval"],
    [ac_warn_strict_aliasing="no"])


# We put warnings and optimization flags in GLOBAL_CPPFLAGS, since we will
# put them in per-dir AM_CPPFLAGS. They come before
# CPPFLAGS in the build, so that User CPPFLAGS from the ENV will take effect
# over these. We put includes (above) in CXXFLAGS since that comes after, and
# we do _not_ want those to be overridden by ENV
# -02 causes problems per SWIG... although I think we should get that fixed, 
# but autoconf only defines it if GCC=yes, so it's easy to fix at this point
if test "$GCC" = "yes"
then
  
  if test "$ac_warnings" = "yes" -o "$ac_warn_pedantic" = "yes"
  then
    WARNINGS="-W -Wall"
  fi

  if test "$ac_warn_longlong" = "yes"
  then
    W_LONGLONG="-Wlong-long"
  else
    W_LONGLONG="-Wno-long-long"
  fi

  if test "$ac_warn_strict_aliasing" = "yes"
  then
    W_STRICT_ALIASING="-Wstrict-aliasing"
  else
    W_STRICT_ALIASING="-Wno-strict-aliasing"
  fi

  if test "$ac_warn_pedantic" = "yes"
  then
    GCC_PEDANTIC="-Wextra -pedantic -Wundef -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls ${W_STRICT_ALIASING}"
    GXX_PEDANTIC="-Wextra -pedantic -Wundef -Wredundant-decls ${W_LONGLONG} ${W_STRICT_ALIASING}"
  fi

  if test "$ac_warn_unreachable" = "yes"
  then
    W_UNREACHABLE="-Wunreachable-code"
  fi

  if test "$ac_warn_fail" = "yes"
  then
    W_FAIL="-Werror"
  fi

  GCC_WARNINGS="${WARNINGS} -std=gnu99 ${GCC_PEDANTIC} ${W_UNREACHABLE} ${W_FAIL}"
  GXX_WARNINGS="${WARNINGS} -std=gnu++98 ${GXX_PEDANTIC} ${W_UNREACHABLE} ${W_FAIL}"


  if test "$with_debug" = "yes"
  then
    GCC_OPT="-O0"
  else
    GCC_OPT="-O2"
  fi

  # -fno-strict-aliasing is required because of the casts that look like
  # arg1=*(Ndb_cluster_connection **)&jarg1;
  # where jarg1 is a jlong. Apparently, with -O2 and higher and strict 
  # aliasing on, gcc will produce assembler that does not perform this
  # assignment. 
  AM_CFLAGS="${GCC_OPT} -fno-strict-aliasing -ggdb3 ${GCC_WARNINGS} ${PTHREAD_CFLAGS}"
  AM_CXXFLAGS="${GCC_OPT} -fno-strict-aliasing -ggdb3 ${GXX_WARNINGS} ${PTHREAD_CFLAGS}"

fi

AC_SUBST(AM_CPPFLAGS)
AC_SUBST(AM_CFLAGS)

AC_SUBST(SWIG_DIR)
AC_SUBST(PERL)
AC_SUBST(PYTHON)
AC_CONFIG_FILES([Makefile python/gearman/release.py ])
AC_OUTPUT

